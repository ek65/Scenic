(set-logic QF_NRA)
VectorOperatorDistribution
self.object: PointIn(Options(<Road Road 0>, <Road Road 1>, <Road Road 2>, <Road Road 3>, <Road Road 4>, <Road Road 5>, <Road Road 6>, <Road Road 7>, <Road Road 8>, <Road Road 9>, <Road Road 10>, <Road Road 11>, <Road Road 12>, <Road Road 13>, <Road Road 14>, <Road Road 15>, <Road Road 16>, <Road Road 17>, <Road Road 18>, <Road Road 19>, <Road Road 20>, <Road Road 21>, <Road Road 22>, <Road Road 23>, <Road Road 24>, <Road Road 25>, <Road Road 26>, <Road Road 27>, <Road Road 28>, <Road Road 29>, <Road Road 30>, <Road Road 31>, <Road Road 32>, <Road Road 33>, <Road Road 34>, <Road Road 35>, <Road Road 36>, <Road Road 37>, <Road Road 38>, <Road Road 39>, <Road Road 40>, <Road Road 41>, <Road Road 42>, <Road Road 43>, <Road Road 44>, <Road Road 45>, <Road Road 46>, <Road Road 47>, <Road Road 48>, <Road Road 49>, <Road Road 50>, <Road Road 51>, <Road Road 52>))
self.operator: offsetRotated
self.operands: (<scenic.core.distributions.OperatorDistribution object at 0x13115f100>, (0 @ 7.25))
PointInRegionDistribution
creating a variable x1
(declare-fun x1 () Real)
creating a variable y1
(declare-fun y1 () Real)
Options class
Options(<Road Road 6>, <Road Road 16>, <Road Road 33>)
Class PolygonalRegion
encodePolygonalRegion_SMT
SectorRegion
center: (34.29218818206131 @ 47.37734414056533)
type(center): <class 'scenic.core.vectors.OrientedVector'>
radius: <class 'int'>
heading: -0.171168233421227
type(heading): <class 'float'>
angle: <class 'float'>
OrientedVector
encode circle of ego_visibleRegion
(assert (<= (+ (* (- x1 34.29218818206131) (- x1 34.29218818206131)) (* (- y1 47.37734414056533) (- y1 47.37734414056533))) (* 50 50)))
VectorOperatorDistribution
self.object: (34.29218818206131 @ 47.37734414056533)
self.operator: offsetRadially
self.operands: [50, -1.2183657846178246]
OrientedVector
offsetRadially
(declare-fun x2 () Real)
(declare-fun y2 () Real)
(assert (= x2 (- (* (cos -1.2183657846178246) 0) (* (sin -1.2183657846178246) 50))))
(assert (= y2 (+ (* (sin -1.2183657846178246) 0) (* (cos -1.2183657846178246) 50))))
(declare-fun x3 () Real)
(declare-fun y3 () Real)
(assert (= x3 (+ x2 34.29218818206131)))
(assert (= y3 (+ y2 47.37734414056533)))
VectorOperatorDistribution
self.object: (34.29218818206131 @ 47.37734414056533)
self.operator: offsetRadially
self.operands: [50, 0.8760293177753706]
OrientedVector
offsetRadially
(declare-fun x4 () Real)
(declare-fun y4 () Real)
(assert (= x4 (- (* (cos 0.8760293177753706) 0) (* (sin 0.8760293177753706) 50))))
(assert (= y4 (+ (* (sin 0.8760293177753706) 0) (* (cos 0.8760293177753706) 50))))
(declare-fun x5 () Real)
(declare-fun y5 () Real)
(assert (= x5 (+ x4 34.29218818206131)))
(assert (= y5 (+ y4 47.37734414056533)))
SectorRegion encode left_line constraint
(assert (<= (- (* (- x5 34.29218818206131) (- y1 47.37734414056533)) (* (- y5 47.37734414056533) (- x1 34.29218818206131))) 0))
SectorRegion encode right_line constraint
(assert (<= 0 (- (* (- x3 34.29218818206131) (- y1 47.37734414056533)) (* (- y3 47.37734414056533) (- x1 34.29218818206131)))))
creating a variable s1
(declare-fun s1 () Real)
creating a variable t1
(declare-fun t1 () Real)
(assert (and (<= 0 s1) (<= s1 1)))
(assert (and (<= 0 t1) (<= t1 1)))
(assert (<= (+ s1 t1) 1))
p0: (-35.58932530938311, 96.6973595411418)
p1: (-35.6104131385858, 82.69749037569837)
p2: (18.749410240487016, 82.61560884828148)
p0: (18.749410240487016, 82.61560884828148)
p1: (18.77049806968963, 96.61547801372491)
p2: (-35.58932530938311, 96.6973595411418)
p0: (24.239513391669856, 76.94885881499533)
p1: (22.99256117950081, 30.32721182611068)
p2: (36.987441436177015, 29.952901864489977)
p0: (36.987441436177015, 29.952901864489977)
p1: (38.234393648346064, 76.57454885337464)
p2: (24.239513391669856, 76.94885881499533)
p0: (56.35188166387852, 96.66739222790889)
p1: (44.55088142084298, 96.37599955760288)
p2: (44.90374144706871, 82.38056211211094)
p0: (94.77469063686243, 45.036412237314366)
p1: (94.6807690815649, 13.229335693392953)
p2: (108.68059302004352, 13.187971002219415)
p0: (108.68059302004352, 13.187971002219415)
p1: (108.77496545372455, 45.10874107309768)
p2: (108.57574556488703, 49.72403488833242)
p0: (108.57574556488703, 49.72403488833242)
p1: (108.01898696536809, 54.01585538113958)
p2: (107.10380263936958, 58.24359495796997)
p0: (107.10380263936958, 58.24359495796997)
p1: (105.83718851817059, 62.37746305312949)
p2: (104.22601493946082, 66.39413335420686)
p0: (104.22601493946082, 66.39413335420686)
p1: (102.28378055167566, 70.2592426492923)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (97.4625845060954, 77.43090884443495)
p2: (94.61657437066042, 80.68844941809643)
p0: (94.61657437066042, 80.68844941809643)
p1: (91.50681915811042, 83.6952362076897)
p2: (88.15364634924025, 86.43124657355905)
p0: (88.15364634924025, 86.43124657355905)
p1: (84.58404463204532, 88.8744591841701)
p2: (80.82170809990741, 91.00897741997684)
p0: (80.82170809990741, 91.00897741997684)
p1: (76.89326657705703, 92.81969315735692)
p2: (72.82853045477272, 94.29315744820067)
p0: (72.82853045477272, 94.29315744820067)
p1: (68.65026950565667, 95.42083472889124)
p2: (64.39405790408462, 96.19284967867699)
p0: (64.39405790408462, 96.19284967867699)
p1: (60.090044318392785, 96.60426565141027)
p2: (56.35188166387852, 96.66739222790889)
p0: (56.35188166387852, 96.66739222790889)
p1: (44.90374144706871, 82.38056211211094)
p2: (56.262444096597896, 82.6668859859344)
p0: (94.68170597467142, 48.005662326048046)
p1: (94.77469063686243, 45.036412237314366)
p2: (108.68059302004352, 13.187971002219415)
p0: (108.68059302004352, 13.187971002219415)
p1: (108.57574556488703, 49.72403488833242)
p2: (107.10380263936958, 58.24359495796997)
p0: (107.10380263936958, 58.24359495796997)
p1: (104.22601493946082, 66.39413335420686)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (94.61657437066042, 80.68844941809643)
p2: (88.15364634924025, 86.43124657355905)
p0: (88.15364634924025, 86.43124657355905)
p1: (80.82170809990741, 91.00897741997684)
p2: (72.82853045477272, 94.29315744820067)
p0: (72.82853045477272, 94.29315744820067)
p1: (64.39405790408462, 96.19284967867699)
p2: (56.35188166387852, 96.66739222790889)
p0: (56.35188166387852, 96.66739222790889)
p1: (56.262444096597896, 82.6668859859344)
p2: (59.85517854029246, 82.60610104135802)
p0: (94.31957719519058, 51.12943377055413)
p1: (94.68170597467142, 48.005662326048046)
p2: (108.68059302004352, 13.187971002219415)
p0: (108.68059302004352, 13.187971002219415)
p1: (107.10380263936958, 58.24359495796997)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (88.15364634924025, 86.43124657355905)
p2: (72.82853045477272, 94.29315744820067)
p0: (72.82853045477272, 94.29315744820067)
p1: (56.35188166387852, 96.66739222790889)
p2: (59.85517854029246, 82.60610104135802)
p0: (93.69449065281637, 54.21994975436354)
p1: (94.31957719519058, 51.12943377055413)
p2: (108.68059302004352, 13.187971002219415)
p0: (72.82853045477272, 94.29315744820067)
p1: (59.85517854029246, 82.60610104135802)
p2: (62.98520675883043, 82.26372923925922)
p0: (92.81284529441534, 57.24290155528045)
p1: (93.69449065281637, 54.21994975436354)
p2: (108.68059302004352, 13.187971002219415)
p0: (72.82853045477272, 94.29315744820067)
p1: (62.98520675883043, 82.26372923925922)
p2: (66.07148187082252, 81.66041238756571)
p0: (92.81284529441534, 57.24290155528045)
p1: (108.68059302004352, 13.187971002219415)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (72.82853045477272, 94.29315744820067)
p2: (66.07148187082252, 81.66041238756571)
p0: (91.68189825591648, 60.177189217823305)
p1: (92.81284529441534, 57.24290155528045)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (66.07148187082252, 81.66041238756571)
p2: (69.10420676082103, 80.79750916401021)
p0: (90.30463645046575, 63.01359048543068)
p1: (91.68189825591648, 60.177189217823305)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (69.10420676082103, 80.79750916401021)
p2: (72.04580352818385, 79.68571163357544)
p0: (88.69812525957977, 65.71696006504764)
p1: (90.30463645046575, 63.01359048543068)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (72.04580352818385, 79.68571163357544)
p2: (74.88740511951114, 78.32893732484762)
p0: (86.86776483012908, 68.27924748588042)
p1: (88.69812525957977, 65.71696006504764)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (74.88740511951114, 78.32893732484762)
p2: (77.60490472648847, 76.73810986257061)
p0: (84.8256486128524, 70.68170114553236)
p1: (86.86776483012908, 68.27924748588042)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (77.60490472648847, 76.73810986257061)
p2: (80.17906788237951, 74.92448912616729)
p0: (82.59167465608601, 72.90091192622599)
p1: (84.8256486128524, 70.68170114553236)
p2: (100.0235325886776, 73.9474161031604)
p0: (100.0235325886776, 73.9474161031604)
p1: (80.17906788237951, 74.92448912616729)
p2: (82.59167465608601, 72.90091192622599)
(assert (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (and (= x1 (+ -35.58932530938311 (+ (* (- -35.6104131385858 -35.58932530938311) s1) (* (- 18.749410240487016 -35.58932530938311) t1)))) (= y1 (+ 96.6973595411418 (+ (* (- 82.69749037569837 96.6973595411418) s1) (* (- 82.61560884828148 96.6973595411418) t1))))) (and (= x1 (+ 18.749410240487016 (+ (* (- 18.77049806968963 18.749410240487016) s1) (* (- -35.58932530938311 18.749410240487016) t1)))) (= y1 (+ 82.61560884828148 (+ (* (- 96.61547801372491 82.61560884828148) s1) (* (- 96.6973595411418 82.61560884828148) t1)))))) (and (= x1 (+ 24.239513391669856 (+ (* (- 22.99256117950081 24.239513391669856) s1) (* (- 36.987441436177015 24.239513391669856) t1)))) (= y1 (+ 76.94885881499533 (+ (* (- 30.32721182611068 76.94885881499533) s1) (* (- 29.952901864489977 76.94885881499533) t1)))))) (and (= x1 (+ 36.987441436177015 (+ (* (- 38.234393648346064 36.987441436177015) s1) (* (- 24.239513391669856 36.987441436177015) t1)))) (= y1 (+ 29.952901864489977 (+ (* (- 76.57454885337464 29.952901864489977) s1) (* (- 76.94885881499533 29.952901864489977) t1)))))) (and (= x1 (+ 56.35188166387852 (+ (* (- 44.55088142084298 56.35188166387852) s1) (* (- 44.90374144706871 56.35188166387852) t1)))) (= y1 (+ 96.66739222790889 (+ (* (- 96.37599955760288 96.66739222790889) s1) (* (- 82.38056211211094 96.66739222790889) t1)))))) (and (= x1 (+ 94.77469063686243 (+ (* (- 94.6807690815649 94.77469063686243) s1) (* (- 108.68059302004352 94.77469063686243) t1)))) (= y1 (+ 45.036412237314366 (+ (* (- 13.229335693392953 45.036412237314366) s1) (* (- 13.187971002219415 45.036412237314366) t1)))))) (and (= x1 (+ 108.68059302004352 (+ (* (- 108.77496545372455 108.68059302004352) s1) (* (- 108.57574556488703 108.68059302004352) t1)))) (= y1 (+ 13.187971002219415 (+ (* (- 45.10874107309768 13.187971002219415) s1) (* (- 49.72403488833242 13.187971002219415) t1)))))) (and (= x1 (+ 108.57574556488703 (+ (* (- 108.01898696536809 108.57574556488703) s1) (* (- 107.10380263936958 108.57574556488703) t1)))) (= y1 (+ 49.72403488833242 (+ (* (- 54.01585538113958 49.72403488833242) s1) (* (- 58.24359495796997 49.72403488833242) t1)))))) (and (= x1 (+ 107.10380263936958 (+ (* (- 105.83718851817059 107.10380263936958) s1) (* (- 104.22601493946082 107.10380263936958) t1)))) (= y1 (+ 58.24359495796997 (+ (* (- 62.37746305312949 58.24359495796997) s1) (* (- 66.39413335420686 58.24359495796997) t1)))))) (and (= x1 (+ 104.22601493946082 (+ (* (- 102.28378055167566 104.22601493946082) s1) (* (- 100.0235325886776 104.22601493946082) t1)))) (= y1 (+ 66.39413335420686 (+ (* (- 70.2592426492923 66.39413335420686) s1) (* (- 73.9474161031604 66.39413335420686) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 97.4625845060954 100.0235325886776) s1) (* (- 94.61657437066042 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 77.43090884443495 73.9474161031604) s1) (* (- 80.68844941809643 73.9474161031604) t1)))))) (and (= x1 (+ 94.61657437066042 (+ (* (- 91.50681915811042 94.61657437066042) s1) (* (- 88.15364634924025 94.61657437066042) t1)))) (= y1 (+ 80.68844941809643 (+ (* (- 83.6952362076897 80.68844941809643) s1) (* (- 86.43124657355905 80.68844941809643) t1)))))) (and (= x1 (+ 88.15364634924025 (+ (* (- 84.58404463204532 88.15364634924025) s1) (* (- 80.82170809990741 88.15364634924025) t1)))) (= y1 (+ 86.43124657355905 (+ (* (- 88.8744591841701 86.43124657355905) s1) (* (- 91.00897741997684 86.43124657355905) t1)))))) (and (= x1 (+ 80.82170809990741 (+ (* (- 76.89326657705703 80.82170809990741) s1) (* (- 72.82853045477272 80.82170809990741) t1)))) (= y1 (+ 91.00897741997684 (+ (* (- 92.81969315735692 91.00897741997684) s1) (* (- 94.29315744820067 91.00897741997684) t1)))))) (and (= x1 (+ 72.82853045477272 (+ (* (- 68.65026950565667 72.82853045477272) s1) (* (- 64.39405790408462 72.82853045477272) t1)))) (= y1 (+ 94.29315744820067 (+ (* (- 95.42083472889124 94.29315744820067) s1) (* (- 96.19284967867699 94.29315744820067) t1)))))) (and (= x1 (+ 64.39405790408462 (+ (* (- 60.090044318392785 64.39405790408462) s1) (* (- 56.35188166387852 64.39405790408462) t1)))) (= y1 (+ 96.19284967867699 (+ (* (- 96.60426565141027 96.19284967867699) s1) (* (- 96.66739222790889 96.19284967867699) t1)))))) (and (= x1 (+ 56.35188166387852 (+ (* (- 44.90374144706871 56.35188166387852) s1) (* (- 56.262444096597896 56.35188166387852) t1)))) (= y1 (+ 96.66739222790889 (+ (* (- 82.38056211211094 96.66739222790889) s1) (* (- 82.6668859859344 96.66739222790889) t1)))))) (and (= x1 (+ 94.68170597467142 (+ (* (- 94.77469063686243 94.68170597467142) s1) (* (- 108.68059302004352 94.68170597467142) t1)))) (= y1 (+ 48.005662326048046 (+ (* (- 45.036412237314366 48.005662326048046) s1) (* (- 13.187971002219415 48.005662326048046) t1)))))) (and (= x1 (+ 108.68059302004352 (+ (* (- 108.57574556488703 108.68059302004352) s1) (* (- 107.10380263936958 108.68059302004352) t1)))) (= y1 (+ 13.187971002219415 (+ (* (- 49.72403488833242 13.187971002219415) s1) (* (- 58.24359495796997 13.187971002219415) t1)))))) (and (= x1 (+ 107.10380263936958 (+ (* (- 104.22601493946082 107.10380263936958) s1) (* (- 100.0235325886776 107.10380263936958) t1)))) (= y1 (+ 58.24359495796997 (+ (* (- 66.39413335420686 58.24359495796997) s1) (* (- 73.9474161031604 58.24359495796997) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 94.61657437066042 100.0235325886776) s1) (* (- 88.15364634924025 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 80.68844941809643 73.9474161031604) s1) (* (- 86.43124657355905 73.9474161031604) t1)))))) (and (= x1 (+ 88.15364634924025 (+ (* (- 80.82170809990741 88.15364634924025) s1) (* (- 72.82853045477272 88.15364634924025) t1)))) (= y1 (+ 86.43124657355905 (+ (* (- 91.00897741997684 86.43124657355905) s1) (* (- 94.29315744820067 86.43124657355905) t1)))))) (and (= x1 (+ 72.82853045477272 (+ (* (- 64.39405790408462 72.82853045477272) s1) (* (- 56.35188166387852 72.82853045477272) t1)))) (= y1 (+ 94.29315744820067 (+ (* (- 96.19284967867699 94.29315744820067) s1) (* (- 96.66739222790889 94.29315744820067) t1)))))) (and (= x1 (+ 56.35188166387852 (+ (* (- 56.262444096597896 56.35188166387852) s1) (* (- 59.85517854029246 56.35188166387852) t1)))) (= y1 (+ 96.66739222790889 (+ (* (- 82.6668859859344 96.66739222790889) s1) (* (- 82.60610104135802 96.66739222790889) t1)))))) (and (= x1 (+ 94.31957719519058 (+ (* (- 94.68170597467142 94.31957719519058) s1) (* (- 108.68059302004352 94.31957719519058) t1)))) (= y1 (+ 51.12943377055413 (+ (* (- 48.005662326048046 51.12943377055413) s1) (* (- 13.187971002219415 51.12943377055413) t1)))))) (and (= x1 (+ 108.68059302004352 (+ (* (- 107.10380263936958 108.68059302004352) s1) (* (- 100.0235325886776 108.68059302004352) t1)))) (= y1 (+ 13.187971002219415 (+ (* (- 58.24359495796997 13.187971002219415) s1) (* (- 73.9474161031604 13.187971002219415) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 88.15364634924025 100.0235325886776) s1) (* (- 72.82853045477272 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 86.43124657355905 73.9474161031604) s1) (* (- 94.29315744820067 73.9474161031604) t1)))))) (and (= x1 (+ 72.82853045477272 (+ (* (- 56.35188166387852 72.82853045477272) s1) (* (- 59.85517854029246 72.82853045477272) t1)))) (= y1 (+ 94.29315744820067 (+ (* (- 96.66739222790889 94.29315744820067) s1) (* (- 82.60610104135802 94.29315744820067) t1)))))) (and (= x1 (+ 93.69449065281637 (+ (* (- 94.31957719519058 93.69449065281637) s1) (* (- 108.68059302004352 93.69449065281637) t1)))) (= y1 (+ 54.21994975436354 (+ (* (- 51.12943377055413 54.21994975436354) s1) (* (- 13.187971002219415 54.21994975436354) t1)))))) (and (= x1 (+ 72.82853045477272 (+ (* (- 59.85517854029246 72.82853045477272) s1) (* (- 62.98520675883043 72.82853045477272) t1)))) (= y1 (+ 94.29315744820067 (+ (* (- 82.60610104135802 94.29315744820067) s1) (* (- 82.26372923925922 94.29315744820067) t1)))))) (and (= x1 (+ 92.81284529441534 (+ (* (- 93.69449065281637 92.81284529441534) s1) (* (- 108.68059302004352 92.81284529441534) t1)))) (= y1 (+ 57.24290155528045 (+ (* (- 54.21994975436354 57.24290155528045) s1) (* (- 13.187971002219415 57.24290155528045) t1)))))) (and (= x1 (+ 72.82853045477272 (+ (* (- 62.98520675883043 72.82853045477272) s1) (* (- 66.07148187082252 72.82853045477272) t1)))) (= y1 (+ 94.29315744820067 (+ (* (- 82.26372923925922 94.29315744820067) s1) (* (- 81.66041238756571 94.29315744820067) t1)))))) (and (= x1 (+ 92.81284529441534 (+ (* (- 108.68059302004352 92.81284529441534) s1) (* (- 100.0235325886776 92.81284529441534) t1)))) (= y1 (+ 57.24290155528045 (+ (* (- 13.187971002219415 57.24290155528045) s1) (* (- 73.9474161031604 57.24290155528045) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 72.82853045477272 100.0235325886776) s1) (* (- 66.07148187082252 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 94.29315744820067 73.9474161031604) s1) (* (- 81.66041238756571 73.9474161031604) t1)))))) (and (= x1 (+ 91.68189825591648 (+ (* (- 92.81284529441534 91.68189825591648) s1) (* (- 100.0235325886776 91.68189825591648) t1)))) (= y1 (+ 60.177189217823305 (+ (* (- 57.24290155528045 60.177189217823305) s1) (* (- 73.9474161031604 60.177189217823305) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 66.07148187082252 100.0235325886776) s1) (* (- 69.10420676082103 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 81.66041238756571 73.9474161031604) s1) (* (- 80.79750916401021 73.9474161031604) t1)))))) (and (= x1 (+ 90.30463645046575 (+ (* (- 91.68189825591648 90.30463645046575) s1) (* (- 100.0235325886776 90.30463645046575) t1)))) (= y1 (+ 63.01359048543068 (+ (* (- 60.177189217823305 63.01359048543068) s1) (* (- 73.9474161031604 63.01359048543068) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 69.10420676082103 100.0235325886776) s1) (* (- 72.04580352818385 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 80.79750916401021 73.9474161031604) s1) (* (- 79.68571163357544 73.9474161031604) t1)))))) (and (= x1 (+ 88.69812525957977 (+ (* (- 90.30463645046575 88.69812525957977) s1) (* (- 100.0235325886776 88.69812525957977) t1)))) (= y1 (+ 65.71696006504764 (+ (* (- 63.01359048543068 65.71696006504764) s1) (* (- 73.9474161031604 65.71696006504764) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 72.04580352818385 100.0235325886776) s1) (* (- 74.88740511951114 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 79.68571163357544 73.9474161031604) s1) (* (- 78.32893732484762 73.9474161031604) t1)))))) (and (= x1 (+ 86.86776483012908 (+ (* (- 88.69812525957977 86.86776483012908) s1) (* (- 100.0235325886776 86.86776483012908) t1)))) (= y1 (+ 68.27924748588042 (+ (* (- 65.71696006504764 68.27924748588042) s1) (* (- 73.9474161031604 68.27924748588042) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 74.88740511951114 100.0235325886776) s1) (* (- 77.60490472648847 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 78.32893732484762 73.9474161031604) s1) (* (- 76.73810986257061 73.9474161031604) t1)))))) (and (= x1 (+ 84.8256486128524 (+ (* (- 86.86776483012908 84.8256486128524) s1) (* (- 100.0235325886776 84.8256486128524) t1)))) (= y1 (+ 70.68170114553236 (+ (* (- 68.27924748588042 70.68170114553236) s1) (* (- 73.9474161031604 70.68170114553236) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 77.60490472648847 100.0235325886776) s1) (* (- 80.17906788237951 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 76.73810986257061 73.9474161031604) s1) (* (- 74.92448912616729 73.9474161031604) t1)))))) (and (= x1 (+ 82.59167465608601 (+ (* (- 84.8256486128524 82.59167465608601) s1) (* (- 100.0235325886776 82.59167465608601) t1)))) (= y1 (+ 72.90091192622599 (+ (* (- 70.68170114553236 72.90091192622599) s1) (* (- 73.9474161031604 72.90091192622599) t1)))))) (and (= x1 (+ 100.0235325886776 (+ (* (- 80.17906788237951 100.0235325886776) s1) (* (- 82.59167465608601 100.0235325886776) t1)))) (= y1 (+ 73.9474161031604 (+ (* (- 74.92448912616729 73.9474161031604) s1) (* (- 72.90091192622599 73.9474161031604) t1)))))))
offsetRotated
offsetRotatedEncodeToSMT()
rotatedByEncodeToSMT()
creating a variable x6
(declare-fun x6 () Real)
creating a variable y6
(declare-fun y6 () Real)
(assert (= x6 (- (* (cos Range(-15.0, 15.0).__mul__(0.01745329252).__add__(<VectorField roadDirection>.__getitem__(PointIn(Options(<Road Road 0>, <Road Road 1>, <Road Road 2>, <Road Road 3>, <Road Road 4>, <Road Road 5>, <Road Road 6>, <Road Road 7>, <Road Road 8>, <Road Road 9>, <Road Road 10>, <Road Road 11>, <Road Road 12>, <Road Road 13>, <Road Road 14>, <Road Road 15>, <Road Road 16>, <Road Road 17>, <Road Road 18>, <Road Road 19>, <Road Road 20>, <Road Road 21>, <Road Road 22>, <Road Road 23>, <Road Road 24>, <Road Road 25>, <Road Road 26>, <Road Road 27>, <Road Road 28>, <Road Road 29>, <Road Road 30>, <Road Road 31>, <Road Road 32>, <Road Road 33>, <Road Road 34>, <Road Road 35>, <Road Road 36>, <Road Road 37>, <Road Road 38>, <Road Road 39>, <Road Road 40>, <Road Road 41>, <Road Road 42>, <Road Road 43>, <Road Road 44>, <Road Road 45>, <Road Road 46>, <Road Road 47>, <Road Road 48>, <Road Road 49>, <Road Road 50>, <Road Road 51>, <Road Road 52>))))) 0) (* (sin Range(-15.0, 15.0).__mul__(0.01745329252).__add__(<VectorField roadDirection>.__getitem__(PointIn(Options(<Road Road 0>, <Road Road 1>, <Road Road 2>, <Road Road 3>, <Road Road 4>, <Road Road 5>, <Road Road 6>, <Road Road 7>, <Road Road 8>, <Road Road 9>, <Road Road 10>, <Road Road 11>, <Road Road 12>, <Road Road 13>, <Road Road 14>, <Road Road 15>, <Road Road 16>, <Road Road 17>, <Road Road 18>, <Road Road 19>, <Road Road 20>, <Road Road 21>, <Road Road 22>, <Road Road 23>, <Road Road 24>, <Road Road 25>, <Road Road 26>, <Road Road 27>, <Road Road 28>, <Road Road 29>, <Road Road 30>, <Road Road 31>, <Road Road 32>, <Road Road 33>, <Road Road 34>, <Road Road 35>, <Road Road 36>, <Road Road 37>, <Road Road 38>, <Road Road 39>, <Road Road 40>, <Road Road 41>, <Road Road 42>, <Road Road 43>, <Road Road 44>, <Road Road 45>, <Road Road 46>, <Road Road 47>, <Road Road 48>, <Road Road 49>, <Road Road 50>, <Road Road 51>, <Road Road 52>))))) 7.25))))
(assert (= y6 (+ (* (sin Range(-15.0, 15.0).__mul__(0.01745329252).__add__(<VectorField roadDirection>.__getitem__(PointIn(Options(<Road Road 0>, <Road Road 1>, <Road Road 2>, <Road Road 3>, <Road Road 4>, <Road Road 5>, <Road Road 6>, <Road Road 7>, <Road Road 8>, <Road Road 9>, <Road Road 10>, <Road Road 11>, <Road Road 12>, <Road Road 13>, <Road Road 14>, <Road Road 15>, <Road Road 16>, <Road Road 17>, <Road Road 18>, <Road Road 19>, <Road Road 20>, <Road Road 21>, <Road Road 22>, <Road Road 23>, <Road Road 24>, <Road Road 25>, <Road Road 26>, <Road Road 27>, <Road Road 28>, <Road Road 29>, <Road Road 30>, <Road Road 31>, <Road Road 32>, <Road Road 33>, <Road Road 34>, <Road Road 35>, <Road Road 36>, <Road Road 37>, <Road Road 38>, <Road Road 39>, <Road Road 40>, <Road Road 41>, <Road Road 42>, <Road Road 43>, <Road Road 44>, <Road Road 45>, <Road Road 46>, <Road Road 47>, <Road Road 48>, <Road Road 49>, <Road Road 50>, <Road Road 51>, <Road Road 52>))))) 0) (* (cos Range(-15.0, 15.0).__mul__(0.01745329252).__add__(<VectorField roadDirection>.__getitem__(PointIn(Options(<Road Road 0>, <Road Road 1>, <Road Road 2>, <Road Road 3>, <Road Road 4>, <Road Road 5>, <Road Road 6>, <Road Road 7>, <Road Road 8>, <Road Road 9>, <Road Road 10>, <Road Road 11>, <Road Road 12>, <Road Road 13>, <Road Road 14>, <Road Road 15>, <Road Road 16>, <Road Road 17>, <Road Road 18>, <Road Road 19>, <Road Road 20>, <Road Road 21>, <Road Road 22>, <Road Road 23>, <Road Road 24>, <Road Road 25>, <Road Road 26>, <Road Road 27>, <Road Road 28>, <Road Road 29>, <Road Road 30>, <Road Road 31>, <Road Road 32>, <Road Road 33>, <Road Road 34>, <Road Road 35>, <Road Road 36>, <Road Road 37>, <Road Road 38>, <Road Road 39>, <Road Road 40>, <Road Road 41>, <Road Road 42>, <Road Road 43>, <Road Road 44>, <Road Road 45>, <Road Road 46>, <Road Road 47>, <Road Road 48>, <Road Road 49>, <Road Road 50>, <Road Road 51>, <Road Road 52>))))) 7.25))))
creating a variable x7
(declare-fun x7 () Real)
creating a variable y7
(declare-fun y7 () Real)
(assert (= x7 (+ x6 x1)))
(assert (= y7 (+ y6 y1)))
(assert (and (= 35.52710697361955 x7) (= 54.5213959025738 y7)))
(check-sat)
(exit)
